<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Victor's Blog (Posts about caffe)</title><link>https://victor-shepardson.github.io/blog/</link><description></description><atom:link href="https://victor-shepardson.github.io/blog/categories/caffe.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 16 Apr 2018 17:50:38 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Video Synthesis With Convolutional Autoencoders</title><link>https://victor-shepardson.github.io/blog/posts/convnet-video-feedback/</link><dc:creator>Victor Shepardson</dc:creator><description>&lt;div&gt;&lt;p&gt;Context: see my &lt;a href="https://victor-shepardson.github.io/blog/posts/video-feedback"&gt;post on video feedback&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In spring of 2015 I took a &lt;a href="http://www.cs.dartmouth.edu/~lorenzo/teaching/cs189/Archive/Spring2015/"&gt;seminar in deep learning&lt;/a&gt; with Lorenzo Torresani. It was one of the most exciting classes I've ever taken. I had been introduced to the field of machine learning by Lorenzo's class the previous fall, and was already riding high on the concept of solving generic problems by optimization. The idea of deep learning for &lt;em&gt;representation learning&lt;/em&gt;--extending ML to more generic problems by learning to interpret raw data--was exciting on its own. I'd also been talking a lot to cool dudes &lt;a href="http://pkmital.com/home/"&gt;Parag Mital&lt;/a&gt;, and &lt;a href="http://www.cs.dartmouth.edu/~sarroff/"&gt;Andy Sarroff&lt;/a&gt; about their work with machine learning, sound and video. And what really blew my mind about deep learning was the similarity between neural networks and the audio/video feedback I'd been using to make noise. This project was my attempt to incorporate a convolutional network trained to encode images as part of a video feedback process.&lt;/p&gt;
&lt;p&gt;The kind of digital video feedback I'd been playing with was superficially quite a bit like a recurrent neural network. At each time step, the current frame of video would be computed from the last (and optionally, the current frame of an input video). There would first be some linear function from images to images (call it D), like translation or blurring; generally, each pixel would take on a linear combination of pixels in the last frame and input frame. Then, there would be some pixel-wise bounded nonlinearity (call it Ïƒ) to keep the process from blowing up, like wrapping around [0, 1] or sigmoid squashing. That's the architecture of an RNN. The only difference was that rather than represent the linear transformation D as a big ol' parameter matrix, I would hand-craft it from a few sampling operations in a fragment shader. And instead of training by backpropagation to do some task, I would fiddle with it manually until it had visually interesting dynamics.&lt;/p&gt;
&lt;p&gt;I might have stopped there and tried to make my video-RNN parameters trainable. But to do what? It was pretty clear I wouldn't make much headway on synthesis of natural video in two weeks, without experience in deep learning software frameworks, and without even a GPU to run on. I wanted a toy-sized problem which might still result in a cool interactive video process. So I came up with a different approach: rather than try to train a recurrent network I would train a feedforward convolutional network, then transplant its parameters into a still partially hand-constructed video process. I came up with a neat way to do that: my CNN would be arranged as an autoencoder. It would have an hourglass shape, moving information out of 2-D image space and into a dense vector representation (which I hand-wavingly hoped would make the network implement a "hierarchy of abstraction"). This would mean that I could bolt an "abstraction dimension" onto the temporal and spatial dimensions of a video feedback process. The autoencoder would implement "texture sampling" from the "less abstract" layer below and "more abstract" layer above. Then I could fiddle with the dynamics by implementing something like "each layer approaches the previous time-step minus the layer above plus the layer below, squashed".&lt;/p&gt;
&lt;p&gt;I almost bit off more than I could chew for a seminar project: my approach demanded that I design and train my own neural network with caffe &lt;em&gt;and&lt;/em&gt; re-implement the forward pass with OpenGL &lt;em&gt;and&lt;/em&gt; spend time exploring the resultant dynamics. I was able to train my autoencoders on &lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html"&gt;CIFAR&lt;/a&gt; with some success, and I was able to make some singular boiling multicolored nonsense. But I didn't get the spectacular emergence of natural image qualities I hoped for.&lt;/p&gt;
&lt;p&gt;Here's the &lt;a href="https://github.com/victor-shepardson/feature-feedback"&gt;GitHub&lt;/a&gt;, which includes a &lt;a href="https://github.com/victor-shepardson/feature-feedback/blob/master/notebooks/writeup.ipynb"&gt;technical writeup&lt;/a&gt;, a &lt;a href="https://github.com/victor-shepardson/feature-feedback/blob/master/notebooks/presentation.ipynb"&gt;jupyter notebook&lt;/a&gt; with the autoencoder experiments in it, and the (probably very brittle) source code for an openFrameworks app which runs the process interactively, optionally with webcam input. It's based on early 2015 versions of caffe and openFrameworks. I may still try to get the openFrameworks app running again and capture some video, for posterity.&lt;/p&gt;
&lt;p&gt;A few months later deep dream came out. Deep dream does a similar thing: it iteratively alters an image using a pre-trained CNN to manifest natural image qualities. The trick to deep dream is that the mechanism is the same as training the network, only turned upside down to optimize inputs instead of parameters. Vanilla deep dream converges, but it's simple to make a &lt;a href="https://www.youtube.com/watch?v=IREsx-xWQ0g"&gt;dynamic version&lt;/a&gt; by incorporating infinite zoom or similar. It's funny how I had the right idea about moving information up and down a hierarchy of abstraction, but failed to realize that backpropagation could do exactly that!&lt;/p&gt;&lt;/div&gt;</description><category>autoencoder</category><category>caffe</category><category>deep learning</category><category>lorenzo torresani</category><category>machine learning</category><category>openFrameworks</category><category>recurrent</category><category>video feedback</category><category>visual</category><guid>https://victor-shepardson.github.io/blog/posts/convnet-video-feedback/</guid><pubDate>Mon, 09 Jan 2017 23:26:25 GMT</pubDate></item></channel></rss>